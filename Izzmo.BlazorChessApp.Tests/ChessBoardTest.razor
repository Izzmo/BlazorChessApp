@inherits TestComponentBase
@using Izzmo.BlazorChessApp.Client.Pages
@using AngleSharp.Html.Dom

<Fixture Test="ChessBoardRendersStartingBoard">
	<ComponentUnderTest>
		<ChessBoard />
	</ComponentUnderTest>

	@code
	{
		void ChessBoardRendersStartingBoard(Fixture fixture)
		{
			var board = fixture.GetComponentUnderTest<ChessBoard>();

			VerifyPawnsColor(board);
			VerifyEmptySquares(board);
		}

		IElement GetElement(IRenderedComponent<ChessBoard> board, char column, int row)
		{
			int columnIndex = Convert.ToInt32(column - 65);
			var index = (8 * (row - 1)) + columnIndex;
			var square = board.FindAll($"tbody td")[index];

			return square;
		}

		void VerifyPawnsColor(IRenderedComponent<ChessBoard> board)
		{
			var charList = new char[8] { 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H' };
			foreach (var c in charList)
			{
				var whitePawnText = ((IHtmlImageElement)GetElement(board, c, 7).GetElementsByTagName("img")[0]).AlternativeText;
				var blackPawnText = ((IHtmlImageElement)GetElement(board, c, 2).GetElementsByTagName("img")[0]).AlternativeText;

				Assert.Equal("Pawn, white", whitePawnText);
				Assert.Equal("Pawn, black", blackPawnText);
			}
		}

		void VerifyEmptySquares(IRenderedComponent<ChessBoard> board)
		{
			var charList = new char[8] { 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H' };
			foreach (var c in charList)
			{
				for (int i = 3; i <= 6; i++)
				{
					var square = (IHtmlElement)GetElement(board, c, i);
					Assert.Equal(0, square.InnerHtml.Length);
				}
			}
		}
	}
</Fixture>
