@inherits TestComponentBase
@using Izzmo.BlazorChessApp.Client.Pages
@using AngleSharp.Html.Dom

<Fixture Setup="RegisterBoardState"
		 Test="ChessBoardRendersStartingBoard">
	<ComponentUnderTest>
		<ChessBoard />
	</ComponentUnderTest>
	<Fragment>
		<td class="possible-position"></td>
	</Fragment>

	@code
	{
		void RegisterBoardState(Fixture fixture)
		{
			var boardState = new BoardState();

			fixture.Services.AddSingleton(boardState);
		}

		void ChessBoardRendersStartingBoard(Fixture fixture)
		{
			var board = fixture.GetComponentUnderTest<ChessBoard>();

			VerifyPawns(board);
			VerifyRooks(board);
			VerifyKnights(board);
			VerifyBishops(board);
			VerifyQueens(board);
			VerifyKings(board);
			VerifyEmptySquares(board);

			VerifyInitialPawnPositions(fixture, board);
		}

		IElement GetElement(IRenderedComponent<ChessBoard> board, char column, int row)
		{
			int columnIndex = Convert.ToInt32(column - 65);
			var index = (8 * (row - 1)) + columnIndex;
			var square = board.FindAll($"tbody td")[index];

			return square;
		}

		void VerifyPawns(IRenderedComponent<ChessBoard> board)
		{
			var columnList = new char[8] { 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H' };
			foreach (var c in columnList)
			{
				var whitePawnText = ((IHtmlImageElement)GetElement(board, c, 7).GetElementsByTagName("img")[0]).AlternativeText;
				var blackPawnText = ((IHtmlImageElement)GetElement(board, c, 2).GetElementsByTagName("img")[0]).AlternativeText;

				Assert.Equal("Pawn, white", whitePawnText);
				Assert.Equal("Pawn, black", blackPawnText);
			}
		}

		void VerifyEmptySquares(IRenderedComponent<ChessBoard> board)
		{
			var columnList = new char[8] { 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H' };
			foreach (var c in columnList)
			{
				for (int i = 3; i <= 6; i++)
				{
					var square = (IHtmlElement)GetElement(board, c, i);
					Assert.Equal(0, square.InnerHtml.Length);
				}
			}
		}

		void VerifyKings(IRenderedComponent<ChessBoard> board)
		{
			var whiteText = ((IHtmlImageElement)GetElement(board, 'E', 8).GetElementsByTagName("img")[0]).AlternativeText;
			var blackText = ((IHtmlImageElement)GetElement(board, 'E', 1).GetElementsByTagName("img")[0]).AlternativeText;

			Assert.Equal("King, white", whiteText);
			Assert.Equal("King, black", blackText);
		}

		void VerifyQueens(IRenderedComponent<ChessBoard> board)
		{
			var whiteText = ((IHtmlImageElement)GetElement(board, 'D', 8).GetElementsByTagName("img")[0]).AlternativeText;
			var blackText = ((IHtmlImageElement)GetElement(board, 'D', 1).GetElementsByTagName("img")[0]).AlternativeText;

			Assert.Equal("Queen, white", whiteText);
			Assert.Equal("Queen, black", blackText);
		}

		void VerifyRooks(IRenderedComponent<ChessBoard> board)
		{
			var columnList = new char[2] { 'A', 'H' };
			foreach (var c in columnList)
			{
				var whiteText = ((IHtmlImageElement)GetElement(board, c, 8).GetElementsByTagName("img")[0]).AlternativeText;
				var blackText = ((IHtmlImageElement)GetElement(board, c, 1).GetElementsByTagName("img")[0]).AlternativeText;

				Assert.Equal("Rook, white", whiteText);
				Assert.Equal("Rook, black", blackText);
			}
		}

		void VerifyKnights(IRenderedComponent<ChessBoard> board)
		{
			var columnList = new char[2] { 'B', 'G' };
			foreach (var c in columnList)
			{
				var whiteText = ((IHtmlImageElement)GetElement(board, c, 8).GetElementsByTagName("img")[0]).AlternativeText;
				var blackText = ((IHtmlImageElement)GetElement(board, c, 1).GetElementsByTagName("img")[0]).AlternativeText;

				Assert.Equal("Knight, white", whiteText);
				Assert.Equal("Knight, black", blackText);
			}
		}

		void VerifyBishops(IRenderedComponent<ChessBoard> board)
		{
			var columnList = new char[2] { 'C', 'F' };
			foreach (var c in columnList)
			{
				var whiteText = ((IHtmlImageElement)GetElement(board, c, 8).GetElementsByTagName("img")[0]).AlternativeText;
				var blackText = ((IHtmlImageElement)GetElement(board, c, 1).GetElementsByTagName("img")[0]).AlternativeText;

				Assert.Equal("Bishop, white", whiteText);
				Assert.Equal("Bishop, black", blackText);
			}
		}

		void VerifyInitialPawnPositions(Fixture fixture, IRenderedComponent<ChessBoard> board)
		{
			var a2 = GetElement(board, 'a', 2);
			var expectedSquare = fixture.GetFragment();

			a2.Click();

			var a3 = GetElement(board, 'a', 3);
			var a4 = GetElement(board, 'a', 4);

			a3.MarkupMatches(expectedSquare);
			a4.MarkupMatches(expectedSquare);
		}
	}
</Fixture>
